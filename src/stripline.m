function result = stripline(line, deletionMark)

    persistent regex;
    if isempty(regex)
        regst = ['(                       ' ...
                 '  (^|\n)                ' ...
                 '    (                   ' ...
                 '      (                 ' ...
                 '        [\]\)}\w.]''+   ' ...
                 '        |               ' ...
                 '        [^''"%]         ' ...
                 '      )+                ' ...
                 '      |                 ' ...
                 '      (?<q>             ' ...
                 '        (?<single>      ' ...
                 '          ''[^''\n]*    ' ...
                 '          (             ' ...
                 '            ''''[^''\n]*' ...
                 '          )*            ' ...
                 '          ''?           ' ...
                 '        )               ' ...
                 '        |               ' ...
                 '        (?<double>      ' ...
                 '          "[^"\n]*      ' ...
                 '          (             ' ...
                 '            ""[^"\n]*   ' ...
                 '          )*            ' ...
                 '          "?            ' ...
                 '        )               ' ...
                 '      )                 ' ...
                 '    )*                  ' ...
                 '  )                     ' ...
                 '([^\n]*)(\n)?'];
        regex = strrep(regst, ' ', '');
    end
    
    if isempty(line) || sum(isspace(line)) == length(line)
        result = line;
        return;
    end
    
    if nargin < 2 || deletionMark == ""
        deletionMark = '%';
    else
        deletionMark = strtrim(deletionMark);
        deletionMark = sprintf('%%%s ', deletionMark);
    end
    
    match = regexp(line, regex, 'tokens');        
    code = match{1}{1};
    comment = match{1}{2};
    newln = match{1}{3};
    
    shouldDelete = deletionMark == "%";
    if ~shouldDelete && length(deletionMark) <= length(comment)
        shouldDelete = strcmp(comment(1:length(deletionMark)), deletionMark);
    end
    if ~shouldDelete && length(deletionMark) - 1 == length(comment)
        shouldDelete = strcmp(comment(1:length(comment)), ...
            deletionMark(1:length(deletionMark) - 1));
    end
    if shouldDelete
         if isempty(regexprep(code, '^\s*$', ''))
             result = '';
             return;
         end
         comment = '';
    end
        
    result = sprintf('%s%s%s', code, comment, newln);
    
end